name: "publish-release"

on:  [push, pull_request]

env:
  CARGO_TERM_COLOR: always
#on:
#  push:
#    branches:
#      - "main"
#      - "release"

jobs:
  lint-test:
    strategy:
      fail-fast: false
      matrix:
        platform: [ ubuntu-latest ] # [ windows-latest, macos-latest, ubuntu-latest ]
        style: [ default ] # [ all, default ]
        rust:
          - stable
        include:
          #          - style: all
          #            flags: '--all-features'
          - style: default
            flags: ''
      #        exclude:
      #          - platform: windows-latest
      #            style: default
      #          - platform: macos-latest
      #            style: default

    runs-on: ${{ matrix.platform }}
    name: "Test"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      ### Prepare cargo & toolchains
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"
          key: ${{ matrix.style }}v1 # increment this to bust the cache if needed

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace ${{ matrix.flags }} -- -D warnings -D clippy::unwrap_used -A clippy::needless_collect -A clippy::from-over-into

      - name: Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: run --all ${{ matrix.flags }}

  crate-publish:
    name: "Publish release"
    needs:
      - lint-test
    if: github.ref == 'refs/heads/main'

    permissions:
      id-token: write # Enable OIDC
      pull-requests: write
      contents: write

    strategy:
      fail-fast: false
      matrix:
        platform: [ ubuntu-latest ] # [ windows-latest, macos-latest, ubuntu-latest ]
        style: [ default ] # [ all, default ]
        rust:
          - stable
        include:
          - style: default
            flags: ''

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3

      - name: Fetch tags
        run: git fetch --tags

      - uses: chainguard-dev/actions/setup-gitsign@main

      ### Prepare cargo & toolchains
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"
          key: ${{ matrix.style }}v1 # increment this to bust the cache if needed

      - name: Run release-plz
        uses: MarcoIeni/release-plz-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # <-- PAT secret name
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

        with:
          tag_name: ${{ github.run_number }}
          release_name: Wakflo Labs ${{ github.run_number }}
          body: |
            ${{ env.RELEASE_DESCRIPTION }}
          draft: true
          prerelease: true

  upload-release:
    name: ${{ matrix.target }}
    needs:
      - lint-test
      - crate-publish
    if: github.ref == 'refs/heads/main'

    permissions:
      id-token: write # Enable OIDC
      pull-requests: write
      contents: write

    strategy:
      matrix:
        platform: [ windows-latest, macos-latest, ubuntu-latest ]
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-apple-darwin
            os: macos-12
          - target: aarch64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-12
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-unknown-freebsd
            os: ubuntu-22.04
          - target: universal-apple-darwin
            os: macos-12

    timeout-minutes: 60

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3
      - name: Fetch tags
        run: git fetch --tags
      - uses: chainguard-dev/actions/setup-gitsign@main

      ### Prepare cargo & toolchains
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"
          key: ${{ matrix.style }}v1 # increment this to bust the cache if needed

#      - uses: taiki-e/setup-cross-toolchain-action@v1
#        with:
#          target: ${{ matrix.target }}
#        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')
#
#      - uses: taiki-e/install-action@cross
#        if: contains(matrix.target, '-musl')

      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: wakflo
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}